# --------------------------------------------------------------------------------------------------
# Makefile used to build the Legato application framework.
#
# This Makefile is intended to run as part of a larger build system.  The following variables
# must be set by that system:
#
# - TARGET = e.g., localhost, ar7, wp85, raspi, etc.
# - CC = path to the appropriate C compiler for the target.
# - STRIP = path to the appropriate debug symbol stripper for the target.
# - READELF = path to the appropriate ELF file info extractor for the target.
# - OBJCOPY = path to the appropriate object file copier/translator utility for the target.
# - LEGATO_FRAMEWORK_NICE_LEVEL = The "nice" level to run framework daemons at.
# - LE_SVCDIR_SERVER_SOCKET_NAME = File system path of the Service Directory's IPC server socket.
# - LE_SVCDIR_CLIENT_SOCKET_NAME = File system path of the Service Directory's IPC client socket.
#
# Framework build output is placed under $(LEGATO_ROOT)/build/$(TARGET)/framework
#
# Copyright (C) Sierra Wireless Inc.
# --------------------------------------------------------------------------------------------------

# Make sure required variables are set.
ifndef TARGET
  $(error TARGET is not set)
endif
ifndef CC
  $(error CC is not set)
endif
ifndef STRIP
  $(error STRIP is not set)
endif
ifndef OBJCOPY
  $(error OBJCOPY is not set)
endif
ifndef READELF
  $(error READELF is not set)
endif
ifndef LEGATO_FRAMEWORK_NICE_LEVEL
  $(error LEGATO_FRAMEWORK_NICE_LEVEL is not set)
endif
ifndef LE_SVCDIR_SERVER_SOCKET_NAME
  $(error LE_SVCDIR_SERVER_SOCKET_NAME is not set)
endif
ifndef LE_SVCDIR_CLIENT_SOCKET_NAME
  $(error LE_SVCDIR_CLIENT_SOCKET_NAME is not set)
endif
ifndef JDK_INCLUDE_DIR
  ifneq ("$(wildcard $(shell which javac 2>/dev/null))","")
    # Make sure that the version is >= Java 8
    JDK_VERSION=$(shell /bin/sh -c "javac -version 2>&1 | awk '{print \$$2}'")
    MIN_JDK_VERSION=1.8.0
    ifeq ($(shell /bin/sh -c "echo -e \"${MIN_JDK_VERSION}\n${JDK_VERSION}\" | sort -C && echo OK"),OK)
      export JDK_INCLUDE_DIR := $(shell readlink -f $(shell which javac 2>/dev/null) | sed "s:/bin/javac::")/include
    else
      $(warning JDK version installed on the system is too old: ${JDK_VERSION}. ${MIN_JDK_VERSION} required.)
    endif
  endif
endif

export LEGATO_ROOT ?= $(CURDIR)
export LEGATO_TARGET := $(TARGET)

ifdef LEGATO_SYSROOT
  export TARGET_CC_SYSROOT := --sysroot=$(LEGATO_SYSROOT)
  export TARGET_SYSROOT=$(LEGATO_SYSROOT)
endif

VERSION := $(shell cat $(LEGATO_ROOT)/version)

BUILD_DIR := $(LEGATO_ROOT)/build/$(TARGET)/framework
BIN_DIR := $(BUILD_DIR)/bin
LIB_DIR := $(BUILD_DIR)/lib
SRC_DIR := $(LEGATO_ROOT)/framework/daemons/linux

LIBJANSSON = $(LIB_DIR)/libjansson.so

# The liblegato build is done by this ninja build script.
NINJA_SCRIPT := $(BUILD_DIR)/build.ninja
NINJA_FLAGS =

# The daemons are built using mkexe.
LOCAL_MKEXE_FLAGS = $(MKEXE_FLAGS)
LOCAL_MKEXE_FLAGS += -o $(BIN_DIR)/$@ -t $(TARGET) -w $(BUILD_DIR)/$@ -l $(LIB_DIR)
LOCAL_MKEXE_FLAGS += -d $(LEGATO_ROOT)/build/$(TARGET)/debug

# Do not be verbose by default.
VERBOSE ?= 0
ifeq ($(VERBOSE),1)
  NINJA_FLAGS += -v
  LOCAL_MKEXE_FLAGS += -v
endif

ifneq ($(LEGATO_JOBS),)
  NINJA_FLAGS += -j $(LEGATO_JOBS)
  LOCAL_MKEXE_FLAGS += -j $(LEGATO_JOBS)
endif

# If Java builds are to be enabled, make sure JDK_INCLUDE_DIR is set to your JDK include
# directory, typically something like: /usr/lib/jvm/java-7-openjdk-amd64/include
ifdef JDK_INCLUDE_DIR
  LEGATO_JAVA=$(LIB_DIR)/liblegatoJni.so
endif

# Generate and integrate liblegato.py in the Legato framework.
BUILD_LIBLEGATO_PY ?= 0
# Version of Python used on target and on host for cffi.
PYTHON := python2.7
ifeq ($(BUILD_LIBLEGATO_PY),1)
  # Check at least that Python 2.7 and the CFFI package are installed to build Python liblegato bindings.
  ifeq ($(shell $(PYTHON) -c "import cffi" 2>&1 > /dev/null; echo $$?), 0)
    LEGATO_PY=$(LIB_DIR)/$(PYTHON)/site-packages/liblegato.py
  else
    $(error BUILD_LIBLEGATO_PY is set, but $(PYTHON) or cffi not available)
  endif
endif

IMA_SMACK_FLAGS =
IMA_SMACK_CFLAGS =
ifeq ($(ENABLE_IMA),1)
  # Check whether something specified in IMA_SMACK environment variable.
  ifneq ($(strip $(IMA_SMACK)),)
    IMA_SMACK_FLAGS := -DIMA_SMACK=$(IMA_SMACK)
    IMA_SMACK_CFLAGS := --cflags=-DIMA_SMACK=$(IMA_SMACK)
  endif
endif


.PHONY: all
all: liblegato daemons targetTools $(LEGATO_JAVA) $(LEGATO_PY)
	# Computing MD5 hash for contents of framework bin and lib directories.
	md5=` ( find $(BIN_DIR) && \
			find $(BIN_DIR) -type f | xargs cat && \
			find $(BIN_DIR) -type l | xargs -r -n 1 readlink && \
			find $(LIB_DIR) && \
			find $(LIB_DIR) -type f | xargs cat && \
			find $(LIB_DIR) -type l | xargs -r -n 1 readlink \
		  ) | md5sum` && \
	md5=$${md5%% *} && \
	echo "$$md5" > $(BUILD_DIR)/md5

.PHONY: targetTools
targetTools: $(LIBJANSSON) liblegato
	$(MAKE) -f Makefile.targetTools DISABLE_SMACK=$(DISABLE_SMACK)


.PHONY: liblegato
liblegato: $(LIB_DIR) $(NINJA_SCRIPT)
	ninja $(NINJA_FLAGS) -f $(NINJA_SCRIPT)


ifdef JDK_INCLUDE_DIR

$(BUILD_DIR)/java/:
	mkdir -p $(BUILD_DIR)/java/

$(BUILD_DIR)/java/io/legato/*.class: $(LEGATO_ROOT)/framework/java/io/legato/*.java $(BUILD_DIR)/java/
	javac $(LEGATO_ROOT)/framework/java/io/legato/*.java -d $(BUILD_DIR)/java/

$(LIB_DIR)/legato.jar: $(BUILD_DIR)/java/io/legato/*.class
	jar -cf $(LIB_DIR)/legato.jar -C $(BUILD_DIR)/java .

$(BUILD_DIR)/legatoJni.h: $(LIB_DIR)/legato.jar
	javah -o $(BUILD_DIR)/legatoJni.h -jni -cp $(LIB_DIR)/legato.jar io.legato.LegatoJni

$(BUILD_DIR)/legatoJni.o: $(BUILD_DIR)/legatoJni.h $(LEGATO_ROOT)/framework/java/legatoJni/legatoJni.c
	$(CCACHE) $(TARGET_CC) $(TARGET_CC_SYSROOT) \
		-DLEGATO_DEBUG \
		-DLEGATO_EMBEDDED \
		-fPIC \
		-I$(LEGATO_ROOT)/framework/include \
		-I$(LEGATO_ROOT)/framework/liblegato \
		-I$(BUILD_DIR) \
		-I$(JDK_INCLUDE_DIR) \
		-I$(JDK_INCLUDE_DIR)/linux \
		-g \
		-O0 \
		-Wall \
		-Werror \
		-o $(BUILD_DIR)/legatoJni.o \
		-c $(LEGATO_ROOT)/framework/java/legatoJni/legatoJni.c

$(LIB_DIR)/liblegatoJni.so: $(LIB_DIR) $(BUILD_DIR)/legatoJni.o
	$(CCACHE) $(TARGET_CC) $(TARGET_CC_SYSROOT) \
		-fPIC \
		-shared \
		-o $(LIB_DIR)/liblegatoJni.so \
		$(BUILD_DIR)/legatoJni.o \
		-L$(LIB_DIR) \
		-llegato \
		-lpthread \
		-lrt

endif

LEGATO_PY_SO=$(LIB_DIR)/$(PYTHON)/site-packages/_liblegato_py.so
LEGATO_PY_CEXT=$(BUILD_DIR)/_liblegato_py.c

$(LEGATO_PY_CEXT):
	rm -rf $(BUILD_DIR)/_py_cdefs/
	mkdir $(BUILD_DIR)/_py_cdefs/
	bash $(LEGATO_ROOT)/framework/python/generate_cdefs.sh "$(BUILD_DIR)/_py_cdefs/"
	$(PYTHON) $(LEGATO_ROOT)/framework/python/generate_c.py "$(BUILD_DIR)/_py_cdefs" $(BUILD_DIR) > /dev/null

$(LEGATO_PY_SO): liblegato $(LEGATO_PY_CEXT)
	mkdir -p $(dir $@)
	$(CCACHE) $(TARGET_CC) $(TARGET_CC_SYSROOT) -o $(LEGATO_PY_SO) $(LEGATO_PY_CEXT) \
		-Wall -Werror \
		-D_FTS_H \
		-fPIC \
		-shared \
		-pthread \
		-I=/usr/include/$(PYTHON)/ \
		-IC \
		-I$(LEGATO_ROOT)/framework/include \
		-I$(LEGATO_ROOT)/framework/liblegato \
		-I$(LEGATO_ROOT)/framework/liblegato/linux \
		-Wl,--enable-new-dtags,-rpath="\$$ORIGIN/../lib" \
		-L$(LIB_DIR) -llegato -l$(PYTHON)

$(LEGATO_PY): $(LEGATO_PY_SO)
	cp $(LEGATO_ROOT)/framework/python/liblegato.py $(LEGATO_PY)

.PHONY: daemons
daemons: start supervisor serviceDirectory logCtrlDaemon configTree watchdog updateDaemon

.PHONY: start
start: liblegato $(BIN_DIR)
	$(CCACHE) $(TARGET_CC) $(TARGET_CC_SYSROOT) -o $(BIN_DIR)/startSystem $(SRC_DIR)/start/start.c \
	    $(SRC_DIR)/common/ima.c\
		-Wall -Werror \
		-I$(LEGATO_ROOT)/framework/include \
		-I$(LEGATO_ROOT)/framework/liblegato \
		-I$(LEGATO_ROOT)/framework/liblegato/linux \
		-I$(LEGATO_ROOT)/framework/daemons/linux/common \
		-DVERSION=\"$(VERSION)\" \
		-DDISABLE_SMACK=$(DISABLE_SMACK) \
		$(IMA_SMACK_FLAGS) \
		-Wl,--enable-new-dtags,-rpath="\$$ORIGIN/../lib" \
		-L$(LIB_DIR) -llegato -lssl -lcrypto

.PHONY: supervisor
supervisor: liblegato $(BIN_DIR)
	mkexe $(LOCAL_MKEXE_FLAGS) \
		$(SRC_DIR)/supervisor \
		-i $(LEGATO_ROOT)/interfaces/supervisor \
		-i $(LEGATO_ROOT)/framework/liblegato \
		-i $(LEGATO_ROOT)/framework/liblegato/linux \
		-i $(LEGATO_ROOT)/framework/daemons/linux/start \
		-i $(LEGATO_ROOT)/framework/daemons/linux/common \
		-s $(SRC_DIR)/supervisor \
		--cflags=-DDISABLE_SMACK=$(DISABLE_SMACK) \
		$(IMA_SMACK_CFLAGS) \
		--cflags=-DNO_LOG_CONTROL \
		--cflags=-DLEGATO_FRAMEWORK_NICE_LEVEL=$(LEGATO_FRAMEWORK_NICE_LEVEL) \
		--ldflags=-lssl \
		--ldflags=-lcrypto

.PHONY: serviceDirectory
serviceDirectory: liblegato $(BIN_DIR)
	mkexe $(LOCAL_MKEXE_FLAGS) \
		$(SRC_DIR)/serviceDirectory \
		--cflags=-I$(LEGATO_ROOT)/framework/liblegato \
		--cflags=-I$(LEGATO_ROOT)/framework/liblegato/linux \
		--cflags=-DNO_LOG_CONTROL \
		--cflags=-DLE_RUNTIME_DIR="$(LE_RUNTIME_DIR)/" \
		--cflags=-DLE_SVCDIR_SERVER_SOCKET_NAME="$(LE_SVCDIR_SERVER_SOCKET_NAME)" \
		--cflags=-DLE_SVCDIR_CLIENT_SOCKET_NAME="$(LE_SVCDIR_CLIENT_SOCKET_NAME)"

.PHONY: logCtrlDaemon
logCtrlDaemon: liblegato $(BIN_DIR)
	mkexe $(LOCAL_MKEXE_FLAGS) \
		$(SRC_DIR)/logDaemon \
		--cflags=-DNO_LOG_CONTROL \
		-i $(LEGATO_ROOT)/framework/liblegato \
		-i $(LEGATO_ROOT)/framework/liblegato/linux \
		-i $(LEGATO_ROOT)/interfaces/supervisor

.PHONY: configTree
configTree: liblegato $(BIN_DIR)
	mkexe $(LOCAL_MKEXE_FLAGS) \
		$(SRC_DIR)/configTree \
		-i $(LEGATO_ROOT)/framework/liblegato \
		-i $(LEGATO_ROOT)/framework/liblegato/linux \
		--cflags=-std=c99

.PHONY: watchdog
watchdog: liblegato $(BIN_DIR)
	mkexe $(LOCAL_MKEXE_FLAGS) \
		-i $(LEGATO_ROOT)/framework/liblegato \
		-i $(LEGATO_ROOT)/framework/liblegato/linux \
		$(SRC_DIR)/watchdog/watchdogDaemon #\
		#--cflags=-DLEGATO_FRAMEWORK_WDOG_DISABLE

.PHONY: updateDaemon
updateDaemon: liblegato $(BIN_DIR)
	mkexe $(LOCAL_MKEXE_FLAGS) \
		$(SRC_DIR)/updateDaemon \
		-i $(LEGATO_ROOT)/interfaces/updateDaemon \
		-i $(LEGATO_ROOT)/components/appCfg \
		-i $(LEGATO_ROOT)/framework/liblegato \
		-i $(LEGATO_ROOT)/framework/liblegato/linux \
		-i $(LEGATO_ROOT)/framework/daemons/linux/common \
		-s $(LEGATO_ROOT)/components \
		-s $(SRC_DIR)/updateDaemon \
		$(IMA_SMACK_CFLAGS) \
		--ldflags=-L$(LIB_DIR) \
		--ldflags=-lssl \
		--ldflags=-lcrypto

# If the ninja script doesn't exist, we generate it using the ninja-generator script.
$(NINJA_SCRIPT): $(BUILD_DIR)
	framework/liblegato/ninja-generator

# Currently, the framework depends on libjansson, which is built using CMake.
$(LIBJANSSON): $(LIB_DIR)
	export TARGET_CC && \
		mkdir -p $(BUILD_DIR)/libjansson
		cd $(BUILD_DIR)/libjansson && \
		cmake $(LEGATO_ROOT)/3rdParty/jansson \
			-DCMAKE_TOOLCHAIN_FILE=$(LEGATO_ROOT)/cmake/toolchain.yocto.cmake \
			-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$(LIB_DIR) \
			-DBUILD_SHARED_LIBS=ON \
			-DJANSSON_WITHOUT_TESTS=ON \
			-DJANSSON_EXAMPLES=OFF \
			-DJANSSON_BUILD_DOCS=OFF \
			-DUSE_CLANG=$(USE_CLANG)
	make -C $(BUILD_DIR)/libjansson
	cp $(BUILD_DIR)/libjansson/lib/libjansson.so $(LIBJANSSON)

# Rules for creating directories.
$(BUILD_DIR) $(LIB_DIR) $(BIN_DIR):
	mkdir -p $@
