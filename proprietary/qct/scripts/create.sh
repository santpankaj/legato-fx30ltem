#!/bin/bash

# Create from a build environment (build with a Yocto + meta-swi-src):
#        /yocto/build_src must exist
#        /yocto/$PLATFORM/apps_proc must exist
# ./create.sh /yocto ar7

ENV_PATH=$1
DEST=${2:-proprietary}
MACHINE=${3:-"swi-$PLATFORM"}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

echo "Creating proprietary headers & libraries package"

if [ -z "$ENV_PATH" ]; then
    echo "Usage: <path to qualcomm sources> <optional: destination directory>"
    exit 1
fi

set -e

copy_headers() {
    local src=$1
    local dst=$2
    local filter=$3
    local fatal=$4

    if ! [ -e "$MDM_ROOT/$src" ]; then
        if $fatal; then
            echo "[ ] $src =====> Doesn't exist"
            exit 1
        else
            echo "[ ] $src =====> Ignoring"
            return
        fi
    fi

    echo "[x] $src"

    mkdir -p $DEST/inc/$dst

    for hdr in $(find "$MDM_ROOT/$src" -name $filter); do
        echo "    $hdr" | sed "s^$MDM_ROOT/*^^"
        cp $hdr $DEST/inc/$dst/
    done
}

copy_library() {
    local src=$1
    local fatal=${2:-false}

    local lib_path=$BLD_ROOT/tmp/sysroots/$MACHINE/usr/lib/$src
    if ! [ -e "$lib_path" ]; then
        if $fatal; then
            echo "[ ] $src =====> Doesn't exist"
            exit 1
        else
            echo "[ ] $src =====> Ignoring"
            return
        fi
    fi

    echo "[x] $src"

    cp $lib_path $DEST/lib/
}

update_from_path() {
    BLD_ROOT=$1
    MDM_ROOT=$2

    cd $DIR

    # Libraries from Yocto
    echo
    echo "Copying libraries from $BLD_ROOT ..."

    mkdir -p $DEST/lib
    cd $DEST/lib

    copy_library "libsierra_qapi.a"
    copy_library "libsierra_qcsi.a"
    copy_library "libsierra_sd_client.a"
    copy_library "libloc_api.a"
    copy_library "libqmiservices.a"
    copy_library "libqmi_cci.a"

    # Headers from AMSS
    echo
    echo "Copying headers from $MDM_ROOT ..."

    mkdir -p $DEST/inc
    cd $DEST/inc

    mkdir -p framework
    mkdir -p services

    # Framework
    echo
    echo "--> Framework"
    copy_headers "apps_proc/qmi-framework/inc" framework "*.h" true
    copy_headers "apps_proc/qmi/inc" framework "qmi_port_defs.h" true
    copy_headers "apps_proc/qmi/inc" framework "qmi.h" true
    copy_headers "apps_proc/qmi/inc" framework "qmi_platform_config.h" false
    copy_headers "apps_proc/qmi/platform" framework "qmi_platform_config.h" false
    copy_headers "apps_proc/sierra/sd" framework "sdudefs.h" false

    # Services
    echo
    echo "--> Services"
    copy_headers "apps_proc/qmi/services" services "*_v??.h" true
    copy_headers "apps_proc/sierra/qcsi" services "*_v??.h" false
    copy_headers "apps_proc/hardware/qcom/gps/loc_api/loc_api_v02" services "*_v??.h" false
    copy_headers "apps_proc/qcom-opensource/location/loc_api/loc_api_v02" services "*_v??.h" false
    copy_headers "modem_proc/sierra/src/qapi/src/common" services "*_v??.h" false
    copy_headers "apps_proc/qmi/platform" services "qmi_platform.h" false
    copy_headers "modem_proc/sierra/qapi/api" services "*_v??.h" false
    copy_headers "modem_proc/sierra/qcsi/api" services "*_v??.h" false
    copy_headers "modem_proc/qmimsgs/swiaudio/api" services "*_v??.h" false
    copy_headers "apps_proc/qmi/inc" framework "qmi_atcop_srvc.h" false

    # Only keep one common_v01.h
    if [ -e "$DEST/inc/framework/common_v01.h" ] && [ -e "$DEST/inc/services/common_v01.h" ]; then
        rm "$DEST/inc/services/common_v01.h"
    fi
}

generate_meta_header() {
    local output="$DEST/inc/qmi_includes.h"

    tee $output <<Headers
/**
 * @file qmi_includes.h
 *
 * Auto-generated QMI meta include file.
 *
 * @warning Do not edit this file manually, it is auto-generated by create.sh on firmware release.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */

#ifndef LEGATO_QMI_INCLUDE_GUARD
#define LEGATO_QMI_INCLUDE_GUARD
Headers

    echo -e "\n// Framework" | tee -a $output
    for file in qmi_client.h qmi_idl_lib.h qmi_idl_lib_internal.h qmi_port_defs.h qmi_client_instance_defs.h common_v01.h; do
        [ -e "$DEST/inc/framework/$file" ] || continue
        echo "#include \"${file}\"" | tee -a $output
    done

    echo -e "\n// Services" | tee -a $output
    for file in $(ls -1 $DEST/inc/services/); do
        local ignore_message=""

        case $file in
            qapi_modem_v01.h) ignore_message="Conflicting with qapi_apps_v01.h" ;;
            qualcomm_mobile_access_point_msgr_v01.h) ignore_message="Duplicate of qualcomm_mobile_access_point_v01.h" ;;
        esac

        if [ -n "$ignore_message" ]; then
            ignore_comment="// Not including \"${file}\": ${ignore_message}"

            # Truncate to 100 chars
            if [ $(echo $ignore_comment | wc -c) -gt 100 ]; then
                ignore_comment="$(echo $ignore_comment | sed 's/\(.\{97\}\).*/\1/')..."
            fi

            echo "$ignore_comment" | tee -a $output
        else
            echo "#include \"${file}\"" | tee -a $output
        fi
    done

    tee -a $output <<Headers

#endif /* LEGATO_QMI_INCLUDE_GUARD */

Headers

}

if ! [ -e "$ENV_PATH" ]; then
    echo "Invalid path: '$ENV_PATH' doesn't exist"
    exit 1
fi

if [ -e "$ENV_PATH/qmi" ] && [ -e "$ENV_PATH/../modem_proc" ]; then
    ENV_PATH="$ENV_PATH/../.."
elif [ -e "$ENV_PATH/apps_proc" ]; then
    ENV_PATH="$ENV_PATH/.."
fi

ENV_PATH=$(readlink -f $ENV_PATH)
DEST=$(readlink -f $DEST)

if [ -z "$PLATFORM" ]; then
    echo "Platform not set (\$PLATFORM) ... finding out from given path"
    PLATFORM=$(ls -1 $ENV_PATH | egrep '^mdm[0-9x]*$' | head -1)
    if [ -z "$PLATFORM" ]; then
        echo "Unable to find platform"
        exit 1
    else
        echo "Found platform '$PLATFORM'"
    fi
fi

if [ ! -e "$ENV_PATH/build_src" ] || [ ! -e "$ENV_PATH/$PLATFORM/apps_proc" ]; then
    echo "Invalid path: Yocto must be built ($ENV_PATH/build_src) and AMSS must be available (expected $ENV_PATH/$PLATFORM/apps_proc)"
    exit 1
fi

mkdir -p $DEST
rm -rf $DEST/*

update_from_path $ENV_PATH/build_src $ENV_PATH/$PLATFORM
generate_meta_header
